Index: src/ch/epfl/rigel/gui/BlackBodyColor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.epfl.rigel.gui;\r\n\r\nimport ch.epfl.rigel.Preconditions;\r\nimport ch.epfl.rigel.math.ClosedInterval;\r\nimport ch.epfl.rigel.math.Interval;\r\nimport javafx.scene.paint.Color;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.UncheckedIOException;\r\nimport java.nio.charset.Charset;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic final class BlackBodyColor {\r\n\r\n    private BlackBodyColor(){}\r\n\r\n    private final static int TEMP_START = 1;\r\n    private final static int TEMP_END = 6;\r\n    private final static int DEG_START = 10;\r\n    private final static int COLOR_START = 80;\r\n    private final static int COLOR_END = 87;\r\n\r\n    private final static Interval TEMP_INTERVAL = ClosedInterval.of(1000, 40000);\r\n\r\n    private final static Charset US_ASCII = StandardCharsets.US_ASCII;\r\n    private final static String BBR_COLOR = (\"/bbr_Color.txt\");\r\n    private final static Map<Integer, Color> COLOR_MAP = loader();\r\n\r\n    private static Map<Integer, Color> loader(){\r\n        final Map<Integer, Color> tempColor = new HashMap();\r\n        String line;\r\n        try(BufferedReader r = new BufferedReader(new InputStreamReader(BlackBodyColor.class.getResourceAsStream(BBR_COLOR), US_ASCII))){\r\n            while((line = r.readLine()) != null) {\r\n                if(line.startsWith(\" \") && line.startsWith(\"10deg\", DEG_START)) {\r\n                    Color color = Color.web(line.substring(COLOR_START, COLOR_END));\r\n                    tempColor.put((int) Double.parseDouble(line.substring(TEMP_START, TEMP_END)), color);\r\n                }\r\n            }\r\n            return tempColor;\r\n        } catch(IOException e) {\r\n            throw new UncheckedIOException(e);\r\n        }\r\n    }\r\n\r\n    public static Color colorForTemperature(double temp) {\r\n        Preconditions.checkInInterval(TEMP_INTERVAL, temp);\r\n        return COLOR_MAP.get((int) Math.round(temp/100) * 100);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/ch/epfl/rigel/gui/BlackBodyColor.java	(revision bbdfdc3fd5b4e1794dbd836b2aae912c6c3681e6)
+++ src/ch/epfl/rigel/gui/BlackBodyColor.java	(date 1587806641487)
@@ -31,7 +31,7 @@
     private final static Map<Integer, Color> COLOR_MAP = loader();
 
     private static Map<Integer, Color> loader(){
-        final Map<Integer, Color> tempColor = new HashMap();
+        final Map<Integer, Color> tempColor = new HashMap<>();
         String line;
         try(BufferedReader r = new BufferedReader(new InputStreamReader(BlackBodyColor.class.getResourceAsStream(BBR_COLOR), US_ASCII))){
             while((line = r.readLine()) != null) {
Index: test/ch/epfl/rigel/gui/SkyCanvasPainterTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.epfl.rigel.gui;\r\n\r\nimport ch.epfl.rigel.astronomy.AsterismLoader;\r\nimport ch.epfl.rigel.astronomy.HygDatabaseLoader;\r\nimport ch.epfl.rigel.astronomy.ObservedSky;\r\nimport ch.epfl.rigel.astronomy.StarCatalogue;\r\nimport ch.epfl.rigel.coordinates.GeographicCoordinates;\r\nimport ch.epfl.rigel.coordinates.HorizontalCoordinates;\r\nimport ch.epfl.rigel.coordinates.StereographicProjection;\r\nimport javafx.application.Application;\r\nimport javafx.application.Platform;\r\nimport javafx.embed.swing.SwingFXUtils;\r\nimport javafx.scene.canvas.Canvas;\r\nimport javafx.scene.image.WritableImage;\r\nimport javafx.scene.transform.Transform;\r\nimport javafx.stage.Stage;\r\n\r\nimport javax.imageio.ImageIO;\r\nimport java.awt.image.BufferedImage;\r\nimport java.io.File;\r\nimport java.io.InputStream;\r\nimport java.time.ZonedDateTime;\r\n\r\npublic final class SkyCanvasPainterTest extends Application {\r\n    public static void main(String[] args) { launch(args); }\r\n\r\n    private InputStream resourceStream(String resourceName) {\r\n        return getClass().getResourceAsStream(resourceName);\r\n    }\r\n\r\n    StarCatalogue.Builder builder = new StarCatalogue.Builder();\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) throws Exception {\r\n        try (InputStream hs = resourceStream(\"/hygdata_v3.csv\")) {\r\n            builder = builder.loadFrom(hs, HygDatabaseLoader.INSTANCE);\r\n        }\r\n        try (InputStream as = resourceStream(\"/asterisms.txt\")) {\r\n            StarCatalogue catalogue = builder\r\n                    .loadFrom(as, AsterismLoader.INSTANCE)\r\n                    .build();\r\n\r\n\r\n            long time0 = 0;\r\n            long timeAvg = 0;\r\n\r\n            ZonedDateTime when =\r\n                    ZonedDateTime.parse(\"2020-02-17T20:15:00+01:00\");\r\n            GeographicCoordinates where =\r\n                    GeographicCoordinates.ofDeg(6.57, 46.52);\r\n            HorizontalCoordinates projCenter =\r\n                    HorizontalCoordinates.ofDeg(277, -23);\r\n            StereographicProjection projection =\r\n                    new StereographicProjection(projCenter);\r\n            ObservedSky sky =\r\n                    new ObservedSky(when, where, projection, catalogue);\r\n\r\n            Canvas canvas =\r\n                    new Canvas(800, 600);\r\n            Transform planeToCanvas =\r\n                    Transform.affine(1300, 0, 0, -1300, 400, 300);\r\n            SkyCanvasPainter painter =\r\n                    new SkyCanvasPainter(canvas);\r\n\r\n            time0 = System.nanoTime();\r\n\r\n            painter.clear();\r\n            painter.drawAsterism(sky, planeToCanvas);\r\n            painter.drawStars(sky, projection, planeToCanvas);\r\n            painter.drawPlanets(sky, projection, planeToCanvas);\r\n            painter.drawSun(sky, projection, planeToCanvas);\r\n            painter.drawMoon(sky, projection, planeToCanvas);\r\n            painter.drawHorizon(projection, planeToCanvas);\r\n\r\n            timeAvg = System.nanoTime() - time0;\r\n\r\n            System.out.println((timeAvg / 1000000d)+\" in milliseconds\"); //PERFORMANCE BENCH\r\n\r\n            WritableImage fxImage =\r\n                    canvas.snapshot(null, null);\r\n            BufferedImage swingImage =\r\n                    SwingFXUtils.fromFXImage(fxImage, null);\r\n            ImageIO.write(swingImage, \"png\", new File(\"sky.png\"));\r\n        }\r\n        Platform.exit();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- test/ch/epfl/rigel/gui/SkyCanvasPainterTest.java	(revision bbdfdc3fd5b4e1794dbd836b2aae912c6c3681e6)
+++ test/ch/epfl/rigel/gui/SkyCanvasPainterTest.java	(date 1587805958203)
@@ -65,7 +65,7 @@
             time0 = System.nanoTime();
 
             painter.clear();
-            painter.drawAsterism(sky, planeToCanvas);
+            //painter.drawAsterism(sky, planeToCanvas);
             painter.drawStars(sky, projection, planeToCanvas);
             painter.drawPlanets(sky, projection, planeToCanvas);
             painter.drawSun(sky, projection, planeToCanvas);
